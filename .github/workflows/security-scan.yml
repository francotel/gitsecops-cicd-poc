name: üîí Container Security Pipeline
on:
  push:
    branches: [ "trivy-test" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: gitsecops-app
  IMAGE_TAG: ${{ github.sha }}
  TRIVY_DOCKER_IMAGE: $IMAGE_NAME:$IMAGE_TAG

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    # FASE 1: PREPARACI√ìN
    - name: üõ† Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # FASE : CACHE
    - name: Cache Trivy DB
      uses: actions/cache@v3
      with:
        path: ~/.cache/trivy
        key: ${{ runner.os }}-trivy-db

    # FASE 2: SAST (AN√ÅLISIS EST√ÅTICO)
    - name: "üîç [SAST] Secrets Scanning (Code)"
      uses: aquasecurity/trivy-action@0.32.0
      with:
        scan-type: 'fs'
        scanners: 'secret'
        format: 'table'
    
    # FASE 3: BUILD
    - name: "üèó Build Docker Image"
      run: |
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
    
    # FASE 4: SCA (DEPENDENCIAS)
    - name: "üì¶ [SCA] Vulnerability Scan (OS/Libraries)"
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}}'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-vulns.sarif'
    
    # FASE 5: REPORTING
    - name: "üìä Upload SAST/SCA Results"
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-vulns.sarif'
        category: my-analysis-tool